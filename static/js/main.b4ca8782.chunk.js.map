{"version":3,"sources":["actions.js","api/api.js","constants.js","components/InputValue.js","components/Currency.js","components/CurrencyList.js","components/DropdownCurr.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["addCurrency","payload","dispatch","console","log","curr","link","currency","JSON","parse","concat","fetch","then","response","json","data","type","rate","InputValue","_this$props","this","props","inputValue","editInputValue","react_default","a","createElement","className","onChange","defaultValue","Component","connect","state","currencies","param","input","target","value","remove","idx","_props$curr","name","toString","replace","formatMoney","onClick","CurrencyList","cart","map","i","components_Currency","key","DropdownCurr","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","buttonClickHandler","setState","changeHandler","event","alert","selected","selection","_this$state","item","stringify","App","components_InputValue","components_CurrencyList","components_DropdownCurr","Boolean","window","location","hostname","match","id","logger","createLogger","rootReducers","combineReducers","arguments","length","undefined","action","assign","toConsumableArray","rates","splice","findIndex","x","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4RAOaA,EAAc,SAACC,GAAD,OAAa,SAACC,GACrCC,QAAQC,IAAIH,EAAQI,MACpB,ICToBC,EDSdC,EAAWC,KAAKC,MAAMR,EAAQI,OCThBC,EDUb,2DAAAI,OAA4DH,EAASF,MCT5EM,MAAML,GAAMM,KAAK,SAAAC,GAAQ,OAAIA,EAASC,UDUjCF,KAAK,SAAAG,GAAI,OAAIb,EAAS,CAAEc,KEXL,eFWyBD,KAAMR,EAAUU,KAAMF,QGMrEG,mLACO,IAAAC,EACkCC,KAAKC,MAApCC,EADHH,EACGG,WAAYC,EADfJ,EACeI,eAEpB,OACIC,EAAAC,EAAAC,cAAA,SAAOC,UAAU,sBAAsBC,SAAUL,EAAgBM,aAAcP,WALlEQ,aAUVC,cAtBS,SAACC,GACrB,MAAO,CACHV,WAAYU,EAAMC,WAAWX,aAIV,SAACpB,GACxB,MAAO,CACHqB,eAAgB,SAACW,GAAD,OAAWhC,EHGS,CAAEc,KEZd,mBFYsCmB,MGHFD,EAAME,OAAOC,WAclEN,CAA6Cb,GCoB7Ca,cA1CS,SAACC,GACrB,MAAO,CACHV,WAAYU,EAAMC,WAAWX,aAKV,SAACpB,GACxB,MAAO,CACHoC,OAAQ,SAACJ,GAAD,OAAWhC,EJAS,CAAEc,KEZhB,SFY8BuB,IIAFL,EAAMK,SAiCzCR,CA7BE,SAACV,GAAU,IAAAmB,EAEKnB,EAAMhB,KAA3BA,EAFgBmC,EAEhBnC,KAAMoC,EAFUD,EAEVC,KAAMxB,EAFIuB,EAEJvB,KAEZK,EAAuBD,EAAvBC,WAAYgB,EAAWjB,EAAXiB,QAGpB,SAAqBrB,GACVA,EAAKyB,WAAWC,QAAQ,wBAAyB,KAGxCC,CAAY3B,EAAOK,GAEvC,OACIE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,WAAMrB,GACNmB,EAAAC,EAAAC,cAAA,WAAMT,EAAOK,IAEjBE,EAAAC,EAAAC,cAAA,WAAMrB,EAAN,MAAeoC,GACfjB,EAAAC,EAAAC,cAAA,sBAAcrB,EAAd,IAAqBY,IAEzBO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBkB,QAAS,kBAAMP,EAAOjB,EAAMkB,OAA9D,UC7BNO,mLAGE,OADiB1B,KAAKC,MAAd0B,KAECC,IAAI,SAAC3C,EAAM4C,GACZ,OACIzB,EAAAC,EAAAC,cAACwB,EAAD,CACIC,IAAKF,EACLV,IAAKU,EACL5C,KAAMA,aATHyB,aAkBZC,cAzBS,SAACC,GACrB,MAAO,CACHe,KAAMf,EAAMC,WAAW1B,WAuBhBwB,CAAyBe,GCdlCM,qBACF,SAAAA,EAAY/B,GAAO,IAAAgC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAlC,KAAAgC,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAlC,KAAAkC,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAtC,KAAMC,KAIVsC,mBAAqB,WACjBN,EAAKO,SAAS,CAAEzB,OAAO,KANRkB,EASnBQ,cAAgB,SAACC,GACbC,MAAMD,EAAM1B,OAAOC,OACnBgB,EAAKO,SAAS,CAAEI,SAAUF,EAAM1B,OAAOC,SATvCgB,EAAKrB,MAAQ,CAAEG,OAAO,EAAO6B,SAAU,IAFxBX,wEAcV,IAAAlC,EAC8BC,KAAKC,MAAhC4C,EADH9C,EACG8C,UAAWjE,EADdmB,EACcnB,YADdkE,EAEuB9C,KAAKY,MAAzBG,EAFH+B,EAEG/B,MAAO6B,EAFVE,EAEUF,SACf,OACc,IAAV7B,EACIX,EAAAC,EAAAC,cAAA,UAAQmB,QAASzB,KAAKuC,oBAAqB,2BAE3CnC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQE,SAAUR,KAAKyC,eAEfI,EAAUjB,IAAI,SAACmB,EAAM5B,GACjB,OACIf,EAAAC,EAAAC,cAAA,UAAQyB,IAAKZ,EACTF,MAAO7B,KAAK4D,UAAUD,IAAQA,EAAK9D,KADvC,MACgD8D,EAAK1B,SAMrEjB,EAAAC,EAAAC,cAAA,UAAQmB,QAAS,kBAAM7C,EAAY,CAAEgE,eAArC,kBAlCOlC,cAyCZC,cArDS,SAACC,GACrB,MAAO,CACHiC,UAAWjC,EAAMC,WAAWgC,YAIT,SAAC/D,GACxB,MAAO,CACHF,YAAa,SAACkC,GAAD,OAAWhC,EAASF,EAAY,CAAEK,KAAM6B,EAAM8B,eA6CpDjC,CAA6CqB,GC/B7CiB,MApBf,WACE,OACE7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAf,6BAEEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,MAEEH,EAAAC,EAAAC,cAAC4C,EAAD,QAGJ9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAC6C,EAAD,MACA/C,EAAAC,EAAAC,cAAC8C,EAAD,UCPUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECdAtE,EAAW,CACbA,SAAU,CACN,CACIF,KAAM,MACNoC,KAAM,oBACNxB,KAAM,OAEV,CACIZ,KAAM,MACNoC,KAAM,eACNxB,KAAM,iBAGdgD,UAAW,CACP,CACIa,GAAI,IACJzE,KAAM,MACNoC,KAAM,mBAEV,CACIqC,GAAI,IACJzE,KAAM,MACNoC,KAAM,qBAEV,CACIqC,GAAI,IACJzE,KAAM,MACNoC,KAAM,0BAEV,CACIqC,GAAI,IACJzE,KAAM,MACNoC,KAAM,eAEV,CACIqC,GAAI,IACJzE,KAAM,MACNoC,KAAM,oBAEV,CACIqC,GAAI,IACJzE,KAAM,MACNoC,KAAM,gBAEV,CACIqC,GAAI,IACJzE,KAAM,MACNoC,KAAM,qBAEV,CACIqC,GAAI,IACJzE,KAAM,MACNoC,KAAM,gBAEV,CACIqC,GAAI,IACJzE,KAAM,MACNoC,KAAM,eAGdnB,WAAY,ICnDVyD,EAASC,yBAGTC,EAAeC,YAAgB,CAAEjD,WDmDb,WAAmC,IAAlCD,EAAkCmD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA1B5E,EAAU+E,EAAgBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAClD,OAAQG,EAAOtE,MAEX,IPtEoB,eOuEhB,OAAOsC,OAAOiC,OAAO,GAAIvD,EACrB,CAAEzB,SAAQ,GAAAG,OAAA4C,OAAAkC,EAAA,EAAAlC,CAAMtB,EAAMzB,UAAZ,CAAsB,CAAEF,KAAMiF,EAAOvE,KAAKV,KAAMoC,KAAM6C,EAAOvE,KAAK0B,KAAMxB,KAAMqE,EAAOrE,KAAKwE,MAAZ,GAAA/E,OAAqB4E,EAAOvE,KAAKV,YAEjI,IPxEc,SO0EV,OADA2B,EAAMzB,SAASmF,OAAO1D,EAAMzB,SAASoF,UAAU,SAAAC,GAAC,OAAIA,EAAEd,KAAOQ,EAAO/C,MAAM,GACnEe,OAAOiC,OAAO,GAAIvD,EACrB,CAAEzB,SAAS+C,OAAAkC,EAAA,EAAAlC,CAAKtB,EAAMzB,YAE9B,IP3EwB,mBO4EpB,OAAO+C,OAAOiC,OAAO,GAAIvD,EACrB,CAAEV,WAAYgE,EAAOnD,QAE7B,QACI,OAAOH,MCjEb6D,EAAQC,YAAYb,EAAcc,YAAgBC,IAAiBjB,IAEzEkB,IAASC,OACL1E,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAUN,MAAOA,GACbrE,EAAAC,EAAAC,cAAC0E,EAAD,OAEJC,SAASC,eAAe,SFwGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7F,KAAK,SAAA8F,GACjCA,EAAaC","file":"static/js/main.b4ca8782.chunk.js","sourcesContent":["import { apiCall } from './api/api';\r\n\r\nimport {\r\n    ADD_CURRENCY, REMOVE, EDIT_INPUT_VALUE\r\n} from './constants'\r\n\r\n//flow : from components file to this file, after this will go to reducers.js\r\nexport const addCurrency = (payload) => (dispatch) => {\r\n    console.log(payload.curr);\r\n    const currency = JSON.parse(payload.curr);\r\n    apiCall(`https://api.exchangeratesapi.io/latest?base=USD&symbols=${currency.curr}`)\r\n        .then(data => dispatch({ type: ADD_CURRENCY, data: currency, rate: data, }))\r\n}\r\n\r\nexport const remove = (payload) => ({ type: REMOVE, idx: payload.idx });\r\n\r\nexport const editInputValue = (payload) => ({ type: EDIT_INPUT_VALUE, input: payload.input }); ","export const apiCall = (link) =>\r\n    fetch(link).then(response => response.json())","export const ADD_CURRENCY = 'ADD_CURRENCY';\r\n\r\nexport const REMOVE = 'REMOVE';\r\n\r\nexport const EDIT_INPUT_VALUE = 'EDIT_INPUT_VALUE';","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { editInputValue } from '../actions';\r\n\r\n//get state from reducers.js (redux)\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        inputValue: state.currencies.inputValue\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        editInputValue: (param) => dispatch(editInputValue({ input: param.target.value }))\r\n    }\r\n}\r\n\r\nclass InputValue extends Component {\r\n    render() {\r\n        const { inputValue, editInputValue } = this.props;\r\n\r\n        return (\r\n            <input className=\"currency--inputForm\" onChange={editInputValue} defaultValue={inputValue} />\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InputValue);","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { remove } from '../actions';\r\n\r\n//get state from reducers.js (redux)\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        inputValue: state.currencies.inputValue\r\n    }\r\n}\r\n\r\n// flow: this dispatch() will go to actions.js\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        remove: (param) => dispatch(remove({ idx: param.idx }))\r\n    }\r\n}\r\n\r\nconst Currency = (props) => {\r\n    //we get props.product from CurrencyList component\r\n    const { curr, name, rate } = props.curr;\r\n    //get removeFromCurrency from mapDispatchToProps\r\n    const { inputValue, remove } = props;\r\n\r\n    // function to format string to have thousand separators\r\n    function formatMoney(rate) {\r\n        return rate.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n    }\r\n\r\n    const formatTotal = formatMoney(rate * inputValue);\r\n\r\n    return (\r\n        <div className=\"currency--item\">\r\n            <div className=\"currency--content\">\r\n                <div className=\"currency--item_header\">\r\n                    <div>{curr}</div>\r\n                    <div>{rate * inputValue}</div>\r\n                </div>\r\n                <div>{curr} - {name}</div>\r\n                <div>1 USD = {curr} {rate}</div>\r\n            </div>\r\n            <div className=\"currency--remove\" onClick={() => remove(props.idx)}>(-)</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//first parameter must be null if we only use mapDispatchToProps\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Currency);","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport Currency from './Currency'\r\n\r\n//get state from reducers.js (redux)\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        cart: state.currencies.currency\r\n    }\r\n}\r\n\r\n//will loop from cart list, so each product will have their own individual Cart component\r\nclass CurrencyList extends Component {\r\n    render() {\r\n        const { cart } = this.props;\r\n        return (\r\n            cart.map((curr, i) => {\r\n                return (\r\n                    <Currency\r\n                        key={i}\r\n                        idx={i}\r\n                        curr={curr}\r\n                    />\r\n                );\r\n            })\r\n        )\r\n    }\r\n}\r\n\r\n//second parameter for dispatch can be left out if we only use mapStateToProps\r\nexport default connect(mapStateToProps)(CurrencyList);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addCurrency } from '../actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        selection: state.currencies.selection\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addCurrency: (param) => dispatch(addCurrency({ curr: param.selected }))\r\n    }\r\n}\r\n\r\nclass DropdownCurr extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { input: false, selected: '' };\r\n    }\r\n\r\n    buttonClickHandler = () => {\r\n        this.setState({ input: true });\r\n    }\r\n\r\n    changeHandler = (event) => {\r\n        alert(event.target.value);\r\n        this.setState({ selected: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        const { selection, addCurrency } = this.props;\r\n        const { input, selected } = this.state;\r\n        return (\r\n            input === false ?\r\n                <button onClick={this.buttonClickHandler}>{'(+) Add More Currencies'}</button>\r\n                :\r\n                <div>\r\n                    <select onChange={this.changeHandler}>\r\n                        {\r\n                            selection.map((item, idx) => {\r\n                                return (\r\n                                    <option key={idx}\r\n                                        value={JSON.stringify(item)}>{item.curr} - {item.name}\r\n                                    </option>\r\n                                )\r\n                            })\r\n                        }\r\n                    </select>\r\n                    <button onClick={() => addCurrency({ selected })}>Submit</button>\r\n                </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DropdownCurr);","import React from 'react';\nimport InputValue from '../components/InputValue';\nimport CurrencyList from '../components/CurrencyList';\nimport '../styles/App.css';\nimport DropdownCurr from '../components/DropdownCurr';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"currency--header\">\n          USD - United States Dollar\n          <div className=\"currency--sub\">\n            USD\n            <InputValue />\n          </div>\n        </div>\n        <div className=\"currency--body\">\n          <CurrencyList />\n          <DropdownCurr />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    ADD_CURRENCY, REMOVE, EDIT_INPUT_VALUE\r\n} from './constants';\r\n\r\nconst currency = {\r\n    currency: [\r\n        {\r\n            curr: 'IDR',\r\n            name: 'Indonesian Rupiah',\r\n            rate: 14200\r\n        },\r\n        {\r\n            curr: 'JPY',\r\n            name: 'Japanese Yen',\r\n            rate: 111.7847533632\r\n        }\r\n    ],\r\n    selection: [\r\n        {\r\n            id: '1',\r\n            curr: 'CAD',\r\n            name: 'Canadian Dollar'\r\n        },\r\n        {\r\n            id: '2',\r\n            curr: 'IDR',\r\n            name: 'Indonesian Rupiah'\r\n        },\r\n        {\r\n            id: '3',\r\n            curr: 'GBP',\r\n            name: 'British Pound Sterling'\r\n        },\r\n        {\r\n            id: '4',\r\n            curr: 'CHF',\r\n            name: 'Swiss Franc'\r\n        },\r\n        {\r\n            id: '5',\r\n            curr: 'SGD',\r\n            name: 'Singapore Dollar'\r\n        },\r\n        {\r\n            id: '6',\r\n            curr: 'INR',\r\n            name: 'Indian Rupee'\r\n        },\r\n        {\r\n            id: '7',\r\n            curr: 'MYR',\r\n            name: 'Malaysian Ringgit'\r\n        },\r\n        {\r\n            id: '8',\r\n            curr: 'JPY',\r\n            name: 'Japanese Yen'\r\n        },\r\n        {\r\n            id: '9',\r\n            curr: 'KRW',\r\n            name: 'Korean Won'\r\n        }\r\n    ],\r\n    inputValue: 10.00\r\n}\r\n\r\nexport const currencies = (state = currency, action = {}) => {\r\n    switch (action.type) {\r\n        //set searchField state\r\n        case ADD_CURRENCY:\r\n            return Object.assign({}, state,\r\n                { currency: [...state.currency, { curr: action.data.curr, name: action.data.name, rate: action.rate.rates[`${action.data.curr}`] }] })\r\n\r\n        case REMOVE:\r\n            state.currency.splice(state.currency.findIndex(x => x.id === action.idx), 1);\r\n            return Object.assign({}, state,\r\n                { currency: [...state.currency] })\r\n\r\n        case EDIT_INPUT_VALUE:\r\n            return Object.assign({}, state,\r\n                { inputValue: action.input })\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport './styles/index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { currencies } from './reducers';\n\n\n//logger for redux so it will log activites in browser console\nconst logger = createLogger()\n\n//for reducers in reducers.js\nconst rootReducers = combineReducers({ currencies })\n\n//initialize store for reducers with loggers\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}